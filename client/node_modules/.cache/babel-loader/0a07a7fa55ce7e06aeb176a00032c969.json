{"ast":null,"code":"var _jsxFileName = \"/Users/bretshort/Desktop/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATED_CURRENT_CATEGORY, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({\n  setCategory\n}) {\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/bretshort/Desktop/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","UPDATE_CATEGORIES","UPDATED_CURRENT_CATEGORY","UPDATE_CURRENT_CATEGORY","useQuery","QUERY_CATEGORIES","useStoreContext","idbPromise","CategoryMenu","setCategory","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,iBADF,EAEEC,wBAFF,EAGEC,uBAHF,QAIO,qBAJP;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAAQC,UAAR,QAAyB,qBAAzB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAuC;AAErC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,eAAe,EAAzC;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCX,QAAQ,CAACC,gBAAD,CAAhD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIe,YAAJ,EAAkB;AAChB;AACAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEf,iBADC;AAEPW,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFlB,OAAD,CAAR;AAIAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CX,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBW,QAAtB,CAAV;AACD,OAFD;AAGD,KATD,MASO,IAAI,CAACL,OAAL,EAAc;AACnBN,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCY,IAAhC,CAAqCP,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEf,iBADC;AAEPW,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAnBQ,EAmBN,CAACG,YAAD,EAAeF,OAAf,EAAwBF,QAAxB,CAnBM,CAAT;;AAqBA,QAAMS,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb,uBADC;AAEPmB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGT,UAAU,CAACW,GAAX,CAAgBC,IAAD,iBACd;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAelB,YAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  UPDATE_CATEGORIES,\n  UPDATED_CURRENT_CATEGORY,\n  UPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport {idbPromise} from '../../utils/helpers';\n\nfunction CategoryMenu({ setCategory }) {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        })\n      })\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}